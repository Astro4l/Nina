using System;
using System.Collections.Generic;
using ASCOM.Com.DriverAccess;
using ASCOM.Common.DeviceInterfaces;

// Auto Generated by "AscomDeviceFacades.tt"
namespace NINA.Equipment.ASCOMFacades {
    public interface IAscomDeviceFacade<T> : IDisposable where T : ASCOMDevice {
        T Proxied { get; set; }
        System.Boolean Connected { get; set; }
        System.String Description { get; }
        System.String DriverInfo { get; }
        System.String DriverVersion { get; }
        System.Int16 InterfaceVersion { get; }
        System.String Name { get; }
        IList<System.String> SupportedActions { get; }
        void SetupDialog();
        System.String Action(System.String ActionName, System.String ActionParameter);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public interface IFocuserFacade : IAscomDeviceFacade<Focuser> {
        Boolean Absolute { get; }
        Boolean IsMoving { get; }
        Int32 MaxIncrement { get; }
        Int32 MaxStep { get; }
        Int32 Position { get; }
        Double StepSize { get; }
        Boolean TempComp { get; set; }
        Boolean TempCompAvailable { get; }
        Double Temperature { get; }
        void Halt();
        void Move(Int32 Position);
    }

    public class FocuserFacadeProxy : IFocuserFacade {
        private Focuser proxied;

        public Focuser Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public String Name { get => proxied.Name; }
        public Boolean Absolute { get => proxied.Absolute; }
        public Boolean IsMoving { get => proxied.IsMoving; }
        public Int32 MaxIncrement { get => proxied.MaxIncrement; }
        public Int32 MaxStep { get => proxied.MaxStep; }
        public Int32 Position { get => proxied.Position; }
        public Double StepSize { get => proxied.StepSize; }
        public Boolean TempComp { get => proxied.TempComp; set => proxied.TempComp = value; }
        public Boolean TempCompAvailable { get => proxied.TempCompAvailable; }
        public Double Temperature { get => proxied.Temperature; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public void Halt() {
            proxied.Halt();
        }
        public void Move(Int32 Position) {
            proxied.Move(Position);
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface ICameraFacade : IAscomDeviceFacade<Camera> {
        Int16 BinX { get; set; }
        Int16 BinY { get; set; }
        CameraState CameraState { get; }
        Int32 CameraXSize { get; }
        Int32 CameraYSize { get; }
        Boolean CanAbortExposure { get; }
        Boolean CanAsymmetricBin { get; }
        Boolean CanGetCoolerPower { get; }
        Boolean CanPulseGuide { get; }
        Boolean CanSetCCDTemperature { get; }
        Boolean CanStopExposure { get; }
        Double CCDTemperature { get; }
        Boolean CoolerOn { get; set; }
        Double CoolerPower { get; }
        Double ElectronsPerADU { get; }
        Double FullWellCapacity { get; }
        Boolean HasShutter { get; }
        Double HeatSinkTemperature { get; }
        Object ImageArray { get; }
        Object ImageArrayVariant { get; }
        Boolean ImageReady { get; }
        Boolean IsPulseGuiding { get; }
        Double LastExposureDuration { get; }
        String LastExposureStartTime { get; }
        Int32 MaxADU { get; }
        Int16 MaxBinX { get; }
        Int16 MaxBinY { get; }
        Int32 NumX { get; set; }
        Int32 NumY { get; set; }
        Double PixelSizeX { get; }
        Double PixelSizeY { get; }
        Double SetCCDTemperature { get; set; }
        Int32 StartX { get; set; }
        Int32 StartY { get; set; }
        Int16 BayerOffsetX { get; }
        Int16 BayerOffsetY { get; }
        Boolean CanFastReadout { get; }
        Double ExposureMax { get; }
        Double ExposureMin { get; }
        Double ExposureResolution { get; }
        Boolean FastReadout { get; set; }
        Int16 Gain { get; set; }
        Int16 GainMax { get; }
        Int16 GainMin { get; }
        IList<String> Gains { get; }
        Int16 PercentCompleted { get; }
        Int16 ReadoutMode { get; set; }
        IList<String> ReadoutModes { get; }
        String SensorName { get; }
        SensorType SensorType { get; }
        Int32 Offset { get; set; }
        Int32 OffsetMax { get; }
        Int32 OffsetMin { get; }
        IList<String> Offsets { get; }
        Double SubExposureDuration { get; set; }
        void AbortExposure();
        void PulseGuide(GuideDirection Direction, Int32 Duration);
        void StartExposure(Double Duration, Boolean Light);
        void StopExposure();
    }

    public class CameraFacadeProxy : ICameraFacade {
        private Camera proxied;

        public Camera Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public String Name { get => proxied.Name; }
        public Int16 BinX { get => proxied.BinX; set => proxied.BinX = value; }
        public Int16 BinY { get => proxied.BinY; set => proxied.BinY = value; }
        public CameraState CameraState { get => proxied.CameraState; }
        public Int32 CameraXSize { get => proxied.CameraXSize; }
        public Int32 CameraYSize { get => proxied.CameraYSize; }
        public Boolean CanAbortExposure { get => proxied.CanAbortExposure; }
        public Boolean CanAsymmetricBin { get => proxied.CanAsymmetricBin; }
        public Boolean CanGetCoolerPower { get => proxied.CanGetCoolerPower; }
        public Boolean CanPulseGuide { get => proxied.CanPulseGuide; }
        public Boolean CanSetCCDTemperature { get => proxied.CanSetCCDTemperature; }
        public Boolean CanStopExposure { get => proxied.CanStopExposure; }
        public Double CCDTemperature { get => proxied.CCDTemperature; }
        public Boolean CoolerOn { get => proxied.CoolerOn; set => proxied.CoolerOn = value; }
        public Double CoolerPower { get => proxied.CoolerPower; }
        public Double ElectronsPerADU { get => proxied.ElectronsPerADU; }
        public Double FullWellCapacity { get => proxied.FullWellCapacity; }
        public Boolean HasShutter { get => proxied.HasShutter; }
        public Double HeatSinkTemperature { get => proxied.HeatSinkTemperature; }
        public Object ImageArray { get => proxied.ImageArray; }
        public Object ImageArrayVariant { get => proxied.ImageArrayVariant; }
        public Boolean ImageReady { get => proxied.ImageReady; }
        public Boolean IsPulseGuiding { get => proxied.IsPulseGuiding; }
        public Double LastExposureDuration { get => proxied.LastExposureDuration; }
        public String LastExposureStartTime { get => proxied.LastExposureStartTime; }
        public Int32 MaxADU { get => proxied.MaxADU; }
        public Int16 MaxBinX { get => proxied.MaxBinX; }
        public Int16 MaxBinY { get => proxied.MaxBinY; }
        public Int32 NumX { get => proxied.NumX; set => proxied.NumX = value; }
        public Int32 NumY { get => proxied.NumY; set => proxied.NumY = value; }
        public Double PixelSizeX { get => proxied.PixelSizeX; }
        public Double PixelSizeY { get => proxied.PixelSizeY; }
        public Double SetCCDTemperature { get => proxied.SetCCDTemperature; set => proxied.SetCCDTemperature = value; }
        public Int32 StartX { get => proxied.StartX; set => proxied.StartX = value; }
        public Int32 StartY { get => proxied.StartY; set => proxied.StartY = value; }
        public Int16 BayerOffsetX { get => proxied.BayerOffsetX; }
        public Int16 BayerOffsetY { get => proxied.BayerOffsetY; }
        public Boolean CanFastReadout { get => proxied.CanFastReadout; }
        public Double ExposureMax { get => proxied.ExposureMax; }
        public Double ExposureMin { get => proxied.ExposureMin; }
        public Double ExposureResolution { get => proxied.ExposureResolution; }
        public Boolean FastReadout { get => proxied.FastReadout; set => proxied.FastReadout = value; }
        public Int16 Gain { get => proxied.Gain; set => proxied.Gain = value; }
        public Int16 GainMax { get => proxied.GainMax; }
        public Int16 GainMin { get => proxied.GainMin; }
        public IList<String> Gains { get => proxied.Gains; }
        public Int16 PercentCompleted { get => proxied.PercentCompleted; }
        public Int16 ReadoutMode { get => proxied.ReadoutMode; set => proxied.ReadoutMode = value; }
        public IList<String> ReadoutModes { get => proxied.ReadoutModes; }
        public String SensorName { get => proxied.SensorName; }
        public SensorType SensorType { get => proxied.SensorType; }
        public Int32 Offset { get => proxied.Offset; set => proxied.Offset = value; }
        public Int32 OffsetMax { get => proxied.OffsetMax; }
        public Int32 OffsetMin { get => proxied.OffsetMin; }
        public IList<String> Offsets { get => proxied.Offsets; }
        public Double SubExposureDuration { get => proxied.SubExposureDuration; set => proxied.SubExposureDuration = value; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public void AbortExposure() {
            proxied.AbortExposure();
        }
        public void PulseGuide(GuideDirection Direction, Int32 Duration) {
            proxied.PulseGuide(Direction, Duration);
        }
        public void StartExposure(Double Duration, Boolean Light) {
            proxied.StartExposure(Duration, Light);
        }
        public void StopExposure() {
            proxied.StopExposure();
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface IDomeFacade : IAscomDeviceFacade<Dome> {
        Double Altitude { get; }
        Boolean AtHome { get; }
        Boolean AtPark { get; }
        Double Azimuth { get; }
        Boolean CanFindHome { get; }
        Boolean CanPark { get; }
        Boolean CanSetAltitude { get; }
        Boolean CanSetAzimuth { get; }
        Boolean CanSetPark { get; }
        Boolean CanSetShutter { get; }
        Boolean CanSlave { get; }
        Boolean CanSyncAzimuth { get; }
        ShutterState ShutterStatus { get; }
        Boolean Slaved { get; set; }
        Boolean Slewing { get; }
        void AbortSlew();
        void CloseShutter();
        void FindHome();
        void OpenShutter();
        void Park();
        void SetPark();
        void SlewToAltitude(Double Altitude);
        void SlewToAzimuth(Double Azimuth);
        void SyncToAzimuth(Double Azimuth);
    }

    public class DomeFacadeProxy : IDomeFacade {
        private Dome proxied;

        public Dome Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Double Altitude { get => proxied.Altitude; }
        public Boolean AtHome { get => proxied.AtHome; }
        public Boolean AtPark { get => proxied.AtPark; }
        public Double Azimuth { get => proxied.Azimuth; }
        public Boolean CanFindHome { get => proxied.CanFindHome; }
        public Boolean CanPark { get => proxied.CanPark; }
        public Boolean CanSetAltitude { get => proxied.CanSetAltitude; }
        public Boolean CanSetAzimuth { get => proxied.CanSetAzimuth; }
        public Boolean CanSetPark { get => proxied.CanSetPark; }
        public Boolean CanSetShutter { get => proxied.CanSetShutter; }
        public Boolean CanSlave { get => proxied.CanSlave; }
        public Boolean CanSyncAzimuth { get => proxied.CanSyncAzimuth; }
        public ShutterState ShutterStatus { get => proxied.ShutterStatus; }
        public Boolean Slaved { get => proxied.Slaved; set => proxied.Slaved = value; }
        public Boolean Slewing { get => proxied.Slewing; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public void AbortSlew() {
            proxied.AbortSlew();
        }
        public void CloseShutter() {
            proxied.CloseShutter();
        }
        public void FindHome() {
            proxied.FindHome();
        }
        public void OpenShutter() {
            proxied.OpenShutter();
        }
        public void Park() {
            proxied.Park();
        }
        public void SetPark() {
            proxied.SetPark();
        }
        public void SlewToAltitude(Double Altitude) {
            proxied.SlewToAltitude(Altitude);
        }
        public void SlewToAzimuth(Double Azimuth) {
            proxied.SlewToAzimuth(Azimuth);
        }
        public void SyncToAzimuth(Double Azimuth) {
            proxied.SyncToAzimuth(Azimuth);
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface ICoverCalibratorFacade : IAscomDeviceFacade<CoverCalibrator> {
        CoverStatus CoverState { get; }
        CalibratorStatus CalibratorState { get; }
        Int32 Brightness { get; }
        Int32 MaxBrightness { get; }
        void OpenCover();
        void CloseCover();
        void HaltCover();
        void CalibratorOn(Int32 Brightness);
        void CalibratorOff();
    }

    public class CoverCalibratorFacadeProxy : ICoverCalibratorFacade {
        private CoverCalibrator proxied;

        public CoverCalibrator Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public CoverStatus CoverState { get => proxied.CoverState; }
        public CalibratorStatus CalibratorState { get => proxied.CalibratorState; }
        public Int32 Brightness { get => proxied.Brightness; }
        public Int32 MaxBrightness { get => proxied.MaxBrightness; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public void OpenCover() {
            proxied.OpenCover();
        }
        public void CloseCover() {
            proxied.CloseCover();
        }
        public void HaltCover() {
            proxied.HaltCover();
        }
        public void CalibratorOn(Int32 Brightness) {
            proxied.CalibratorOn(Brightness);
        }
        public void CalibratorOff() {
            proxied.CalibratorOff();
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface IRotatorFacade : IAscomDeviceFacade<Rotator> {
        Boolean CanReverse { get; }
        Boolean IsMoving { get; }
        Single Position { get; }
        Boolean Reverse { get; set; }
        Single StepSize { get; }
        Single TargetPosition { get; }
        Single MechanicalPosition { get; }
        void Halt();
        void Move(Single Position);
        void MoveAbsolute(Single Position);
        void MoveMechanical(Single Position);
        void Sync(Single Position);
    }

    public class RotatorFacadeProxy : IRotatorFacade {
        private Rotator proxied;

        public Rotator Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public String Name { get => proxied.Name; }
        public Boolean CanReverse { get => proxied.CanReverse; }
        public Boolean IsMoving { get => proxied.IsMoving; }
        public Single Position { get => proxied.Position; }
        public Boolean Reverse { get => proxied.Reverse; set => proxied.Reverse = value; }
        public Single StepSize { get => proxied.StepSize; }
        public Single TargetPosition { get => proxied.TargetPosition; }
        public Single MechanicalPosition { get => proxied.MechanicalPosition; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public void Halt() {
            proxied.Halt();
        }
        public void Move(Single Position) {
            proxied.Move(Position);
        }
        public void MoveAbsolute(Single Position) {
            proxied.MoveAbsolute(Position);
        }
        public void MoveMechanical(Single Position) {
            proxied.MoveMechanical(Position);
        }
        public void Sync(Single Position) {
            proxied.Sync(Position);
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface ISafetyMonitorFacade : IAscomDeviceFacade<SafetyMonitor> {
        Boolean IsSafe { get; }
    }

    public class SafetyMonitorFacadeProxy : ISafetyMonitorFacade {
        private SafetyMonitor proxied;

        public SafetyMonitor Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public Boolean IsSafe { get => proxied.IsSafe; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface ITelescopeFacade : IAscomDeviceFacade<Telescope> {
        AlignmentMode AlignmentMode { get; }
        Double Altitude { get; }
        Double ApertureArea { get; }
        Double ApertureDiameter { get; }
        Boolean AtHome { get; }
        Boolean AtPark { get; }
        Double Azimuth { get; }
        Boolean CanFindHome { get; }
        Boolean CanPark { get; }
        Boolean CanPulseGuide { get; }
        Boolean CanSetDeclinationRate { get; }
        Boolean CanSetGuideRates { get; }
        Boolean CanSetPark { get; }
        Boolean CanSetPierSide { get; }
        Boolean CanSetRightAscensionRate { get; }
        Boolean CanSetTracking { get; }
        Boolean CanSlew { get; }
        Boolean CanSlewAltAz { get; }
        Boolean CanSlewAltAzAsync { get; }
        Boolean CanSlewAsync { get; }
        Boolean CanSync { get; }
        Boolean CanSyncAltAz { get; }
        Boolean CanUnpark { get; }
        Double Declination { get; }
        Double DeclinationRate { get; set; }
        Boolean DoesRefraction { get; set; }
        EquatorialCoordinateType EquatorialSystem { get; }
        Double FocalLength { get; }
        Double GuideRateDeclination { get; set; }
        Double GuideRateRightAscension { get; set; }
        Boolean IsPulseGuiding { get; }
        Double RightAscension { get; }
        Double RightAscensionRate { get; set; }
        PointingState SideOfPier { get; set; }
        Double SiderealTime { get; }
        Double SiteElevation { get; set; }
        Double SiteLatitude { get; set; }
        Double SiteLongitude { get; set; }
        Boolean Slewing { get; }
        Int16 SlewSettleTime { get; set; }
        Double TargetDeclination { get; set; }
        Double TargetRightAscension { get; set; }
        Boolean Tracking { get; set; }
        DriveRate TrackingRate { get; set; }
        ITrackingRates TrackingRates { get; }
        DateTime UTCDate { get; set; }
        void AbortSlew();
        IAxisRates AxisRates(TelescopeAxis Axis);
        Boolean CanMoveAxis(TelescopeAxis Axis);
        PointingState DestinationSideOfPier(Double RightAscension, Double Declination);
        void FindHome();
        void MoveAxis(TelescopeAxis Axis, Double Rate);
        void Park();
        void PulseGuide(GuideDirection Direction, Int32 Duration);
        void SetPark();
        void SlewToAltAz(Double Azimuth, Double Altitude);
        void SlewToAltAzAsync(Double Azimuth, Double Altitude);
        void SlewToCoordinates(Double RightAscension, Double Declination);
        void SlewToCoordinatesAsync(Double RightAscension, Double Declination);
        void SlewToTarget();
        void SlewToTargetAsync();
        void SyncToAltAz(Double Azimuth, Double Altitude);
        void SyncToCoordinates(Double RightAscension, Double Declination);
        void SyncToTarget();
        void Unpark();
    }

    public class TelescopeFacadeProxy : ITelescopeFacade {
        private Telescope proxied;

        public Telescope Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public AlignmentMode AlignmentMode { get => proxied.AlignmentMode; }
        public Double Altitude { get => proxied.Altitude; }
        public Double ApertureArea { get => proxied.ApertureArea; }
        public Double ApertureDiameter { get => proxied.ApertureDiameter; }
        public Boolean AtHome { get => proxied.AtHome; }
        public Boolean AtPark { get => proxied.AtPark; }
        public Double Azimuth { get => proxied.Azimuth; }
        public Boolean CanFindHome { get => proxied.CanFindHome; }
        public Boolean CanPark { get => proxied.CanPark; }
        public Boolean CanPulseGuide { get => proxied.CanPulseGuide; }
        public Boolean CanSetDeclinationRate { get => proxied.CanSetDeclinationRate; }
        public Boolean CanSetGuideRates { get => proxied.CanSetGuideRates; }
        public Boolean CanSetPark { get => proxied.CanSetPark; }
        public Boolean CanSetPierSide { get => proxied.CanSetPierSide; }
        public Boolean CanSetRightAscensionRate { get => proxied.CanSetRightAscensionRate; }
        public Boolean CanSetTracking { get => proxied.CanSetTracking; }
        public Boolean CanSlew { get => proxied.CanSlew; }
        public Boolean CanSlewAltAz { get => proxied.CanSlewAltAz; }
        public Boolean CanSlewAltAzAsync { get => proxied.CanSlewAltAzAsync; }
        public Boolean CanSlewAsync { get => proxied.CanSlewAsync; }
        public Boolean CanSync { get => proxied.CanSync; }
        public Boolean CanSyncAltAz { get => proxied.CanSyncAltAz; }
        public Boolean CanUnpark { get => proxied.CanUnpark; }
        public Double Declination { get => proxied.Declination; }
        public Double DeclinationRate { get => proxied.DeclinationRate; set => proxied.DeclinationRate = value; }
        public Boolean DoesRefraction { get => proxied.DoesRefraction; set => proxied.DoesRefraction = value; }
        public EquatorialCoordinateType EquatorialSystem { get => proxied.EquatorialSystem; }
        public Double FocalLength { get => proxied.FocalLength; }
        public Double GuideRateDeclination { get => proxied.GuideRateDeclination; set => proxied.GuideRateDeclination = value; }
        public Double GuideRateRightAscension { get => proxied.GuideRateRightAscension; set => proxied.GuideRateRightAscension = value; }
        public Boolean IsPulseGuiding { get => proxied.IsPulseGuiding; }
        public Double RightAscension { get => proxied.RightAscension; }
        public Double RightAscensionRate { get => proxied.RightAscensionRate; set => proxied.RightAscensionRate = value; }
        public PointingState SideOfPier { get => proxied.SideOfPier; set => proxied.SideOfPier = value; }
        public Double SiderealTime { get => proxied.SiderealTime; }
        public Double SiteElevation { get => proxied.SiteElevation; set => proxied.SiteElevation = value; }
        public Double SiteLatitude { get => proxied.SiteLatitude; set => proxied.SiteLatitude = value; }
        public Double SiteLongitude { get => proxied.SiteLongitude; set => proxied.SiteLongitude = value; }
        public Boolean Slewing { get => proxied.Slewing; }
        public Int16 SlewSettleTime { get => proxied.SlewSettleTime; set => proxied.SlewSettleTime = value; }
        public Double TargetDeclination { get => proxied.TargetDeclination; set => proxied.TargetDeclination = value; }
        public Double TargetRightAscension { get => proxied.TargetRightAscension; set => proxied.TargetRightAscension = value; }
        public Boolean Tracking { get => proxied.Tracking; set => proxied.Tracking = value; }
        public DriveRate TrackingRate { get => proxied.TrackingRate; set => proxied.TrackingRate = value; }
        public ITrackingRates TrackingRates { get => proxied.TrackingRates; }
        public DateTime UTCDate { get => proxied.UTCDate; set => proxied.UTCDate = value; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public void AbortSlew() {
            proxied.AbortSlew();
        }
        public IAxisRates AxisRates(TelescopeAxis Axis) {
            return proxied.AxisRates(Axis);
        }
        public Boolean CanMoveAxis(TelescopeAxis Axis) {
            return proxied.CanMoveAxis(Axis);
        }
        public PointingState DestinationSideOfPier(Double RightAscension, Double Declination) {
            return proxied.DestinationSideOfPier(RightAscension, Declination);
        }
        public void FindHome() {
            proxied.FindHome();
        }
        public void MoveAxis(TelescopeAxis Axis, Double Rate) {
            proxied.MoveAxis(Axis, Rate);
        }
        public void Park() {
            proxied.Park();
        }
        public void PulseGuide(GuideDirection Direction, Int32 Duration) {
            proxied.PulseGuide(Direction, Duration);
        }
        public void SetPark() {
            proxied.SetPark();
        }
        public void SlewToAltAz(Double Azimuth, Double Altitude) {
            proxied.SlewToAltAz(Azimuth, Altitude);
        }
        public void SlewToAltAzAsync(Double Azimuth, Double Altitude) {
            proxied.SlewToAltAzAsync(Azimuth, Altitude);
        }
        public void SlewToCoordinates(Double RightAscension, Double Declination) {
            proxied.SlewToCoordinates(RightAscension, Declination);
        }
        public void SlewToCoordinatesAsync(Double RightAscension, Double Declination) {
            proxied.SlewToCoordinatesAsync(RightAscension, Declination);
        }
        public void SlewToTarget() {
            proxied.SlewToTarget();
        }
        public void SlewToTargetAsync() {
            proxied.SlewToTargetAsync();
        }
        public void SyncToAltAz(Double Azimuth, Double Altitude) {
            proxied.SyncToAltAz(Azimuth, Altitude);
        }
        public void SyncToCoordinates(Double RightAscension, Double Declination) {
            proxied.SyncToCoordinates(RightAscension, Declination);
        }
        public void SyncToTarget() {
            proxied.SyncToTarget();
        }
        public void Unpark() {
            proxied.Unpark();
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface IObservingConditionsFacade : IAscomDeviceFacade<ObservingConditions> {
        Double AveragePeriod { get; set; }
        Double CloudCover { get; }
        Double DewPoint { get; }
        Double Humidity { get; }
        Double Pressure { get; }
        Double RainRate { get; }
        Double SkyBrightness { get; }
        Double SkyQuality { get; }
        Double StarFWHM { get; }
        Double SkyTemperature { get; }
        Double Temperature { get; }
        Double WindDirection { get; }
        Double WindGust { get; }
        Double WindSpeed { get; }
        Double TimeSinceLastUpdate(String PropertyName);
        String SensorDescription(String PropertyName);
        void Refresh();
    }

    public class ObservingConditionsFacadeProxy : IObservingConditionsFacade {
        private ObservingConditions proxied;

        public ObservingConditions Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public Double AveragePeriod { get => proxied.AveragePeriod; set => proxied.AveragePeriod = value; }
        public Double CloudCover { get => proxied.CloudCover; }
        public Double DewPoint { get => proxied.DewPoint; }
        public Double Humidity { get => proxied.Humidity; }
        public Double Pressure { get => proxied.Pressure; }
        public Double RainRate { get => proxied.RainRate; }
        public Double SkyBrightness { get => proxied.SkyBrightness; }
        public Double SkyQuality { get => proxied.SkyQuality; }
        public Double StarFWHM { get => proxied.StarFWHM; }
        public Double SkyTemperature { get => proxied.SkyTemperature; }
        public Double Temperature { get => proxied.Temperature; }
        public Double WindDirection { get => proxied.WindDirection; }
        public Double WindGust { get => proxied.WindGust; }
        public Double WindSpeed { get => proxied.WindSpeed; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public Double TimeSinceLastUpdate(String PropertyName) {
            return proxied.TimeSinceLastUpdate(PropertyName);
        }
        public String SensorDescription(String PropertyName) {
            return proxied.SensorDescription(PropertyName);
        }
        public void Refresh() {
            proxied.Refresh();
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface ISwitchFacade : IAscomDeviceFacade<Switch> {
        Int16 MaxSwitch { get; }
        String GetSwitchName(Int16 id);
        void SetSwitchName(Int16 id, String name);
        String GetSwitchDescription(Int16 id);
        Boolean CanWrite(Int16 id);
        Boolean GetSwitch(Int16 id);
        void SetSwitch(Int16 id, Boolean state);
        Double MaxSwitchValue(Int16 id);
        Double MinSwitchValue(Int16 id);
        Double SwitchStep(Int16 id);
        Double GetSwitchValue(Int16 id);
        void SetSwitchValue(Int16 id, Double value);
    }

    public class SwitchFacadeProxy : ISwitchFacade {
        private Switch proxied;

        public Switch Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public Int16 MaxSwitch { get => proxied.MaxSwitch; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public String Name { get => proxied.Name; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public String GetSwitchName(Int16 id) {
            return proxied.GetSwitchName(id);
        }
        public void SetSwitchName(Int16 id, String name) {
            proxied.SetSwitchName(id, name);
        }
        public String GetSwitchDescription(Int16 id) {
            return proxied.GetSwitchDescription(id);
        }
        public Boolean CanWrite(Int16 id) {
            return proxied.CanWrite(id);
        }
        public Boolean GetSwitch(Int16 id) {
            return proxied.GetSwitch(id);
        }
        public void SetSwitch(Int16 id, Boolean state) {
            proxied.SetSwitch(id, state);
        }
        public Double MaxSwitchValue(Int16 id) {
            return proxied.MaxSwitchValue(id);
        }
        public Double MinSwitchValue(Int16 id) {
            return proxied.MinSwitchValue(id);
        }
        public Double SwitchStep(Int16 id) {
            return proxied.SwitchStep(id);
        }
        public Double GetSwitchValue(Int16 id) {
            return proxied.GetSwitchValue(id);
        }
        public void SetSwitchValue(Int16 id, Double value) {
            proxied.SetSwitchValue(id, value);
        }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
    public interface IFilterWheelFacade : IAscomDeviceFacade<FilterWheel> {
        Int32[] FocusOffsets { get; }
        String[] Names { get; }
        Int16 Position { get; set; }
    }

    public class FilterWheelFacadeProxy : IFilterWheelFacade {
        private FilterWheel proxied;

        public FilterWheel Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public String Description { get => proxied.Description; }
        public String DriverInfo { get => proxied.DriverInfo; }
        public String DriverVersion { get => proxied.DriverVersion; }
        public String Name { get => proxied.Name; }
        public Int32[] FocusOffsets { get => proxied.FocusOffsets; }
        public String[] Names { get => proxied.Names; }
        public Int16 Position { get => proxied.Position; set => proxied.Position = value; }
        public Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public IList<String> SupportedActions { get => proxied.SupportedActions; }
        public String Action(String ActionName, String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(String Command, Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public Boolean CommandBool(String Command, Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public String CommandString(String Command, Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public override Boolean Equals(Object obj) {
            return proxied.Equals(obj);
        }
        public override Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override String ToString() {
            return proxied.ToString();
        }
    }
}